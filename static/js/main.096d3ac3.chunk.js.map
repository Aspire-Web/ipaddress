{"version":3,"sources":["map.js","detail.js","App.js","reportWebVitals.js","index.js"],"names":["MapData","props","code","flag","toLowerCase","console","log","position","lat","lng","className","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Marker","icon","Icon","iconUrl","markerIconPng","iconSize","iconAnchor","Popup","src","width","height","Detail","useState","isLoading","setLoading","restData","setRestData","useEffect","axios","get","then","response","data","date","DateTime","now","setLocale","toLocaleString","DATE_FULL","dt1","DATETIME_MED","newTime","slice","isp","location","country","region","App","ip","setIp","loadIP","a","response1","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oTAMe,SAASA,EAAQC,GAE5B,IAAIC,GAAQD,EAAME,KAAO,QAAQC,cACjCC,QAAQC,IAAIJ,GACZ,IAAMK,EAAW,CAACN,EAAMO,IAAIP,EAAMQ,KAClC,OACK,sBAAKC,UAAU,MAAf,UACG,eAACC,EAAA,EAAD,CAAcC,OAAQL,EAAUM,KAAM,GAAIC,iBAAiB,EAA3D,UACU,cAACC,EAAA,EAAD,CACEC,YAAY,yEACZC,IAAI,uDAEP,cAACC,EAAA,EAAD,CAAQX,SAAUA,EAAUY,KAAM,IAAIC,OAAK,CAACC,QAASC,IAAeC,SAAU,CAAC,GAAI,IAAKC,WAAY,CAAC,GAAI,MAAzG,SACG,eAACC,EAAA,EAAD,mCACuB,uBADvB,gCAPf,IAgBG,sBAAKf,UAAU,OAAf,eAAwB,qBAAKgB,IAAK,+BAAgCxB,EAAMyB,MAAM,MAAOC,OAAO,c,WCvBzF,SAASC,EAAO5B,GAC3BI,QAAQC,IAAIL,GACV,MAAgC6B,oBAAS,GAAzC,mBAAOC,EAAP,KAAkBC,EAAlB,KAGF,EAAgCF,qBAAhC,mBAAOG,EAAP,KAAiBC,EAAjB,KAWA,GAVA7B,QAAQC,IAFI,qFAKZ6B,qBAAU,WACFC,IAAMC,IAAI,qFAAqFC,MAAK,SAAAC,GACpGL,EAAYK,EAASC,MACrBR,GAAW,QAEhB,IAECD,EACA,OAAO,qBAAKrB,UAAU,SAAf,wBAGX,IAAI+B,EAAOC,WAASC,MAAMC,YAAYC,eAAeH,WAASI,WAOtDC,EADKL,WAASC,MACNE,eAAeH,WAASM,cAChCC,EAAUF,EAAIG,MAAM,IAO5B,OALA7C,QAAQC,IAAI,gBAAiBmC,GAC7BpC,QAAQC,IAAI,SAAU2C,GAEtB5C,QAAQC,IAAI,MAAMyC,GAGb,sBAAMrC,UAAU,SAAhB,UACG,kCACQ,+BACE,uCACF,6BAAKuB,EAASkB,SAEd,+BACE,2CACF,6BAAKlB,EAASmB,SAASC,aAEvB,+BACE,0CACA,6BAAKpB,EAASmB,SAASE,eAGjC,cAACtD,EAAD,CAASQ,IAAKyB,EAASmB,SAAS5C,IAAKC,IAAKwB,EAASmB,SAAS3C,IAAKN,KAAM8B,EAASmB,SAASC,UAEzF,sBAAK3C,UAAU,OAAf,UACI,gDAA0B,qCAAQ+B,EAAR,SAC1B,sDAAgC,qCAASQ,KAAe,uBACxD,+CAAyB,qDCjB1BM,MAlCf,WAEE,IAGA,EAAoBzB,qBAApB,mBAAO0B,EAAP,KAAWC,EAAX,KAEAtB,qBAAU,kBAAMuB,MAAU,IAE1B,IAAMA,EAAM,uCAAG,4BAAAC,EAAA,6DACbtD,QAAQC,IAAI,aADC,SAEW8B,IAAMC,IATnB,sCAOE,cAEPuB,EAFO,OAIdvD,QAAQC,IAAIsD,GAJE,SAORH,EAAMG,EAAUpB,MAPR,2CAAH,qDAYZ,OAEE,sBAAK9B,UAAU,MAAf,UAEE,sBAAKA,UAAU,KAAf,iCAAyC8C,EAAzC,OAGCA,EAAK,cAAC3B,EAAD,CAAQ2B,GAAIA,IAAS,cC1BlBK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.096d3ac3.chunk.js","sourcesContent":["import { Map,MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\r\nimport React, { useEffect, useState } from 'react';\r\nimport markerIconPng from \"leaflet/dist/images/marker-icon.png\"\r\nimport {Icon} from 'leaflet'\r\n\r\n\r\nexport default function MapData(props) {\r\n\r\n    let code = (props.flag + '.png').toLowerCase();\r\n    console.log(code)\r\n    const position = [props.lat,props.lng]\r\n    return (\r\n         <div className=\"map\">\r\n            <MapContainer center={position} zoom={13} scrollWheelZoom={false}>\r\n                      <TileLayer\r\n                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                      />\r\n                     <Marker position={position} icon={new Icon({iconUrl: markerIconPng, iconSize: [25, 41], iconAnchor: [12, 41]})}>\r\n                        <Popup>\r\n                          A pretty CSS3 popup. <br /> Easily customizable.\r\n                        </Popup>\r\n                    \r\n                  \r\n                    \r\n                </Marker>\r\n                \r\n            </MapContainer>,\r\n            <div className='flag'>  <img src={'https://flagcdn.com/256x192/'+ code} width=\"256\"  height=\"192\"/></div>\r\n      </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport MapData from './map'\r\nimport { DateTime } from \"luxon\";\r\n\r\nexport default function Detail(props) {\r\n    console.log(props)\r\n      const [isLoading, setLoading] = useState(true);\r\n    //const url = `https://geo.ipify.org/api/v2/country,city?apiKey=at_wg8arYLPhgZhqZAK4yP3jcplQWX7T&ipAddress=${props.ip}`\r\n    const url = \"https://geo.ipify.org/api/v2/country,city?apiKey=at_wg8arYLPhgZhqZAK4yP3jcplQWX7T\"\r\n    const [restData, setRestData] = useState()\r\n    console.log(url)\r\n\r\n      \r\n    useEffect(() => {\r\n            axios.get(\"https://geo.ipify.org/api/v2/country,city?apiKey=at_wg8arYLPhgZhqZAK4yP3jcplQWX7T\").then(response => {\r\n            setRestData(response.data);\r\n            setLoading(false);\r\n            });\r\n    }, []);\r\n\r\n    if (isLoading) {\r\n        return <div className=\"detail\">Loading...</div>;\r\n    }\r\n\r\n    let date = DateTime.now().setLocale().toLocaleString(DateTime.DATE_FULL)\r\n   \r\n    \r\n   // let utcDatetime = DateTime.utc().toLocal();\r\n    \r\n\r\n        let dt = DateTime.now();\r\n        let dt1= dt.toLocaleString(DateTime.DATETIME_MED)\r\n        let newTime = dt1.slice(13)\r\n    \r\n    console.log(\"Current Date:\", date);\r\n    console.log(\"Time: \", newTime)\r\n   // console.log(\"UTC\", utcDatetime)\r\n    console.log(\"dt1\",dt1)\r\n    \r\n    return (\r\n         < div className=\"detail\">\r\n            <table>\r\n                    <tr>\r\n                      <td>ISP :</td>\r\n                    <td>{restData.isp}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Country :</td>\r\n                    <td>{restData.location.country}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Region :</td>\r\n                      <td>{restData.location.region}</td>\r\n                    </tr>\r\n            </table>\r\n            <MapData lat={restData.location.lat} lng={restData.location.lng} flag={restData.location.country} />\r\n            \r\n            <div className=\"time\">\r\n                <label>Today is : </label><span> {date} & </span>\r\n                <label>Current Time is :</label><span> { newTime}</span><br/>\r\n                <label>UTC Time :</label><span>  UTC here </span>\r\n               \r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n/*\r\n <tr>\r\n                      <td>ISP:</td>\r\n                    <td>{restData.isp}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Country:</td>\r\n                      <td>{restData.location.country}</td>\r\n                    </tr>\r\n                    <tr>\r\n                      <td>Region:</td>\r\n                      <td>{restData.location.region}</td>\r\n                    </tr>*/","\nimport './App.css';\nimport React,{useEffect,useState} from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet'\nimport axios from 'axios';\nimport Detail from './detail'\n\n\n\n\nfunction App() {\n\n  const url1 = 'https://api.ipify.org?format=json/'  //2.243.59.5  \n\n\n  const [ip, setIp] = useState()\n   // accepts a callback function and a dependencies array\n  useEffect(() => loadIP(), [])\n  \n  const loadIP = async () => { // async/await \n    console.log('I am here')\n    const response1 = await axios.get(url1) // this is a  synchronous operation\n   // const data = await response1.json()\n   console.log(response1)\n   // console.log(data)\n\n   await setIp(response1.data) // here we update the state\n    \n  }\n    \n\n  return (\n\n    <div className=\"App\">\n        \n      <div className=\"ip\">Your IP Address is: {ip} </div>\n      \n      {/*WaitForIT()*/}\n      {ip ? <Detail ip={ip} /> : 'Loading'}\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}